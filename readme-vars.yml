---

# project information
project_name: unifi-network-application
project_url: "https://ui.com/"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/unifi-banner.png"
project_blurb: "The [{{ project_name|capitalize }}]({{ project_url }}) software is a powerful, enterprise wireless software engine ideal for high-density client deployments requiring low latency and high uptime performance."
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"

# supported architectures
available_architectures:
  - { arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - { arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}

# development version
development_versions: false

# container parameters
param_container_name: "{{ project_name }}"
param_usage_include_vols: true
param_volumes:
  - { vol_path: "/config", vol_host_path: "/path/to/{{ project_name }}/data", desc: "Persistent config files" }

param_usage_include_ports: true
param_ports:
  - { external_port: "8443", internal_port: "8443", port_desc: "Unifi web admin port" }
  - { external_port: "3478", internal_port: "3478/udp", port_desc: "Unifi STUN port" }
  - { external_port: "10001", internal_port: "10001/udp", port_desc: "Required for AP discovery" }
  - { external_port: "8080", internal_port: "8080", port_desc: "Required for device communication" }

param_usage_include_env: true
param_env_vars:
  - { env_var: "MONGO_USER", env_value: "unifi", desc: "Mongodb Username. Only evaluated on first run. **Special characters must be [url encoded](https://en.wikipedia.org/wiki/Percent-encoding)**." }
  - { env_var: "MONGO_PASS", env_value: "", desc: "Mongodb Password. Only evaluated on first run. **Special characters must be [url encoded](https://en.wikipedia.org/wiki/Percent-encoding)**." }
  - { env_var: "MONGO_HOST", env_value: "unifi-db[,unifi-db2[,unifi-db3]]", desc: "Mongodb Hostname (multiple hosts separated with comma allowed if MONGO_REPLICASET is set). Only evaluated on first run." }
  - { env_var: "MONGO_PORT", env_value: "27017[,27017[,27017]]", desc: "Mongodb Port (multiple ports separated with comma allowed if MONGO_REPLICASET is set). Only evaluated on first run." }
  - { env_var: "MONGO_DBNAME", env_value: "unifi", desc: "Mongodb Database Name (stats DB is automatically suffixed with `_stat`). Only evaluated on first run." }

# optional container parameters
opt_param_usage_include_env: true
opt_param_env_vars:
  - { env_var: "MEM_LIMIT", env_value: "1024", desc: "Optionally change the Java memory limit (in Megabytes). Set to `default` to reset to default" }
  - { env_var: "MEM_STARTUP", env_value: "1024", desc: "Optionally change the Java initial/minimum memory (in Megabytes). Set to `default` to reset to default" }
  - { env_var: "MONGO_REPLICASET", env_value: "", desc: "Name of Mongodb (existing) [replicaset](https://www.mongodb.com/docs/manual/reference/connection-string/#replica-set-option).  Only evaluated on first run." }
  - { env_var: "MONGO_TLS", env_value: "", desc: "Mongodb enable [TLS](https://www.mongodb.com/docs/manual/reference/connection-string/#mongodb-urioption-urioption.tls). Only evaluated on first run." }
  - { env_var: "MONGO_AUTHSOURCE", env_value: "", desc: "Mongodb [authSource](https://www.mongodb.com/docs/manual/reference/connection-string/#mongodb-urioption-urioption.authSource). For Atlas set to `admin`.Defaults to `MONGO_DBNAME`.Only evaluated on first run." }

opt_param_usage_include_ports: true
opt_param_ports:
  - { external_port: "1900", internal_port: "1900/udp", port_desc: "Required for `Make controller discoverable on L2 network` option" }
  - { external_port: "8843", internal_port: "8843", port_desc: "Unifi guest portal HTTPS redirect port" }
  - { external_port: "8880", internal_port: "8880", port_desc: "Unifi guest portal HTTP redirect port" }
  - { external_port: "6789", internal_port: "6789", port_desc: "For mobile throughput test" }
  - { external_port: "5514", internal_port: "5514/udp", port_desc: "Remote syslog port" }

# application setup block
app_setup_block_enabled: true
app_setup_block: |
  After setup, the web UI is available at https://ip:8443. The application can be configured, or a backup restored, using the first run wizard.

  **This container requires an external mongodb database instance.**

  ### Setting Up Your External Database

  Starting with version 8.1 of Unifi Network Application, mongodb 3.6 through 7.0 are supported.

  **Make sure you pin your database image version and do not use `latest`, as mongodb does not support automatic upgrades between major versions.**

  If you are using the [official mongodb container](https://hub.docker.com/_/mongo/), you can create your user using an `init-mongo.js` file with the following contents:

  ```js
  db.getSiblingDB("MONGO_DBNAME").createUser({user: "MONGO_USER", pwd: "MONGO_PASS", roles: [{role: "dbOwner", db: "MONGO_DBNAME"}]});
  db.getSiblingDB("MONGO_DBNAME_stat").createUser({user: "MONGO_USER", pwd: "MONGO_PASS", roles: [{role: "dbOwner", db: "MONGO_DBNAME_stat"}]});
  ```

  Being sure to replace the placeholders with the same values you supplied to the Unifi container, and mount it into your *mongodb* container.

  For example:

  ```yaml
    unifi-db:
      image: docker.io/mongo:<version tag>
      container_name: unifi-db
      volumes:
        - /path/to/data:/data/db
        - /path/to/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      restart: unless-stopped
  ```

  *Note that the init script method will only work on first run. If you start the mongodb container without an init script it will generate test data automatically and you will have to manually create your databases, or restart with a clean `/data/db` volume and an init script mounted.*

  *If you are using the init script method do not also set `MONGO_INITDB_ROOT_USERNAME`, `MONGO_INITDB_ROOT_PASSWORD`, or any other "INITDB" values as they will cause conflicts.*

  You can also run the commands directly against the database using either `mongo` (< 6.0) or `mongosh` (>= 6.0).

  ### Device Adoption

  For Unifi to adopt other devices, e.g. an Access Point, it is required to change the inform IP address. Because Unifi runs inside Docker by default it uses an IP address not accessible by other devices. To change this go to Settings > System > Advanced and set the Inform Host to a hostname or IP address accessible by your devices. Additionally the checkbox "Override" has to be checked, so that devices can connect to the controller during adoption (devices use the inform-endpoint during adoption).

  Note that you must use 8080:8080. If you MUST change the port, it must be changed on both sides and manually changed in your system.properties file. Otherwise, devices will initially communicate and then break after.

  **Please note, Unifi change the location of this option every few releases so if it's not where it says, search for "Inform" or "Inform Host" in the settings.**

  In order to manually adopt a device take these steps:

  ```
  ssh ubnt@$AP-IP
  set-inform http://$address:8080/inform
  ```

  The default device password is `ubnt`. `$address` is the IP address of the host you are running this container on and `$AP-IP` is the Access Point IP address.

  When using a Security Gateway (router) it could be that network connected devices are unable to obtain an ip address. This can be fixed by setting "DHCP Gateway IP", under Settings > Networks > network_name, to a correct (and accessible) ip address.

  ### Migration From [Unifi-Controller](https://github.com/linuxserver/docker-unifi-controller)

  If you were using the `mongoless` tag for the Unifi Controller container, you can switch directly to the Unifi Network Application container without needing to perform any migration steps.

  **You cannot perform an in-place upgrade from an existing Unifi-Controller container, you must run a backup and then a restore.**

  The simplest migration approach is to take a full backup of your existing install, including history, from the Unifi-Controller web UI, then shut down the old container.

  You can then start up the new container with a clean `/config` mount (and a database container configured), and perform a restore using the setup wizard.

# changelog
changelogs:
  - { date: "04.03.24:", desc: "Install from zip package instead of deb." }
  - { date: "17.02.24:", desc: "Add environment variables for replicaSet." }
  - { date: "17.10.23:", desc: "Add environment variables for TLS and authSource to support Atlas and new MongoDB versions." }
  - { date: "05.09.23:", desc: "Initial release." }
